{"ast":null,"code":"var _jsxFileName = \"/Users/petr_rikhter/Desktop/\\u041A\\u043E\\u043D\\u0441\\u043F\\u0435\\u043A\\u0442 React/10 - React Advanced - \\u041F\\u043E\\u0431\\u043E\\u0447\\u043D\\u044B\\u0435 \\u042D\\u0444\\u0444\\u0435\\u043A\\u0442\\u044B, Reducers, Context/\\u041F\\u043E\\u0431\\u043E\\u0447\\u043D\\u044B\\u0435 \\u044D\\u0444\\u0444\\u0435\\u043A\\u0442\\u044B/src/store (context)/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n//Глобавльный компонент, доступный везде\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLogedIn: false,\n  //функция-пустышка для появления автокомплита при обращении и контексту из-вне\n  onLogout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState();\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n};\n\n//отдельный компонент по управлению контекстом(опционально, но это хорошая практика написания кода)\n_s(AuthContextProvider, \"c3LRk0sXe4rAIFN7chRXubAk0UY=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","isLogedIn","onLogout","AuthContextProvider","props","isLoggedIn","setIsLoggedIn","children"],"sources":["/Users/petr_rikhter/Desktop/Конспект React/10 - React Advanced - Побочные Эффекты, Reducers, Context/Побочные эффекты/src/store (context)/AuthContext.js"],"sourcesContent":["import React, { useState } from \"react\";\n\n//Глобавльный компонент, доступный везде\nconst AuthContext = React.createContext({\n  isLogedIn: false,\n  //функция-пустышка для появления автокомплита при обращении и контексту из-вне\n  onLogout: () => {},\n});\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState();\n\n  return <AuthContext.Provider>{props.children}</AuthContext.Provider>;\n};\n\n//отдельный компонент по управлению контекстом(опционально, но это хорошая практика написания кода)\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AAAA;AACA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAa,CAAC;EACtCC,SAAS,EAAE,KAAK;EAChB;EACAC,QAAQ,EAAE,MAAM,CAAC;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,EAAE;EAE9C,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAA,UAAEM,KAAK,CAACG;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AACtE,CAAC;;AAED;AAAA,GANaJ,mBAAmB;AAAA,KAAnBA,mBAAmB;AAOhC,eAAeJ,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}