{"ast":null,"code":"var _jsxFileName = \"/Users/petr_rikhter/Desktop/\\u041A\\u043E\\u043D\\u0441\\u043F\\u0435\\u043A\\u0442 React/10 - React Advanced - \\u041F\\u043E\\u0431\\u043E\\u0447\\u043D\\u044B\\u0435 \\u042D\\u0444\\u0444\\u0435\\u043A\\u0442\\u044B, Reducers, Context/\\u041F\\u043E\\u0431\\u043E\\u0447\\u043D\\u044B\\u0435 \\u044D\\u0444\\u0444\\u0435\\u043A\\u0442\\u044B/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport React, { useContext } from \"react\";\nimport AuthContext from \"./store (context)/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // //в данный эффект мы помещаем код побочного эффекта, то есть теперь весь этот код не будет запускаться при перезапуске компонента, он будет запускатьсяя автоматически реактом только в случае изменения зависимости в массиве.\n  // useEffect(() => {\n  //   //создаем переменную где храним значение логин пользователя\n  //   const storedLoginInfo = localStorage.getItem(\"isLoggedIn\");\n\n  //   //Вот так делать нельзя, так как в таком случае будет запускаться бесконечный цикл, так как при обновлении состояния обновляется компонент.\n  //   if (storedLoginInfo === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   //Сохранение в локалсторейдж, первый аргумент - название(ключ), второй - значение. В коносли браузера его смотреть можно в application => local storage\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   //Очищаем локальное хранилище\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n  const context = useContext(AuthContext);\n  return (\n    /*#__PURE__*/\n    // Когда используется обертка контекста, то обертка фрагмента необязательна\n    // <React.Fragment>\n    // <AuthContext.Provider\n    //   value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    // >\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!context.isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 33\n        }, this), context.isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)\n    // </AuthContext.Provider>\n    // </React.Fragment>\n  );\n}\n_s(App, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Login","Home","MainHeader","React","useContext","AuthContext","App","context","isLoggedIn"],"sources":["/Users/petr_rikhter/Desktop/Конспект React/10 - React Advanced - Побочные Эффекты, Reducers, Context/Побочные эффекты/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport React, { useContext } from \"react\";\nimport AuthContext from \"./store (context)/AuthContext\";\n\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // //в данный эффект мы помещаем код побочного эффекта, то есть теперь весь этот код не будет запускаться при перезапуске компонента, он будет запускатьсяя автоматически реактом только в случае изменения зависимости в массиве.\n  // useEffect(() => {\n  //   //создаем переменную где храним значение логин пользователя\n  //   const storedLoginInfo = localStorage.getItem(\"isLoggedIn\");\n\n  //   //Вот так делать нельзя, так как в таком случае будет запускаться бесконечный цикл, так как при обновлении состояния обновляется компонент.\n  //   if (storedLoginInfo === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   //Сохранение в локалсторейдж, первый аргумент - название(ключ), второй - значение. В коносли браузера его смотреть можно в application => local storage\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   //Очищаем локальное хранилище\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n  const context = useContext(AuthContext);\n  return (\n    // Когда используется обертка контекста, то обертка фрагмента необязательна\n    // <React.Fragment>\n    // <AuthContext.Provider\n    //   value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    // >\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!context.isLoggedIn && <Login />}\n        {context.isLoggedIn && <Home />}\n      </main>\n    </React.Fragment>\n    // </AuthContext.Provider>\n    // </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,+BAA+B;AAAC;AAExD,SAASC,GAAG,GAAG;EAAA;EACb;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAGH,UAAU,CAACC,WAAW,CAAC;EACvC;IAAA;IACE;IACA;IACA;IACA;IACA;IACA,QAAC,KAAK,CAAC,QAAQ;MAAA,wBACb,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAG,eACd;QAAA,WACG,CAACE,OAAO,CAACC,UAAU,iBAAI,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAG,EAChCD,OAAO,CAACC,UAAU,iBAAI,QAAC,IAAI;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QAC1B;IAAA;MAAA;MAAA;MAAA;IAAA;IAET;IACA;EAAA;AAEJ;AAAC,GA1CQF,GAAG;AAAA,KAAHA,GAAG;AA4CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}